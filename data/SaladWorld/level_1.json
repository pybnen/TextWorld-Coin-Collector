{"objective": "Welcome to another exciting round of TextWorld! Your first objective is to go to the south. And then, go east. And then, attempt to venture east. With that accomplished, pick up the lettuce from the floor of the vegetable market. If you can get your hands on the lettuce, try to go to the west. Then, venture west. Then, put the lettuce on the counter inside the kitchen. And once you've done that, you win!", "version": 1, "infos": [["P", {"room_type": "storage", "adj": null, "id": "P", "type": "P", "name": null, "desc": null, "definite": null, "noun": null, "synonyms": null, "indefinite": null}], ["I", {"room_type": null, "adj": null, "id": "I", "type": "I", "name": null, "desc": null, "definite": null, "noun": null, "synonyms": null, "indefinite": null}], ["r_2", {"room_type": "cook", "adj": null, "id": "r_2", "type": "r", "name": "living room", "desc": "You are in a living room. An usual kind of place. You begin to take stock of what's here.\n\n\n\nYou need an unguarded exit? You should try going east. You don't like doors? Why not try going west, that entranceway is unblocked.", "definite": null, "noun": null, "synonyms": null, "indefinite": null}], ["r_0", {"room_type": "storage", "adj": null, "id": "r_0", "type": "r", "name": "kitchen", "desc": "You've just shown up in a kitchen.\n\n You can make out a counter. Now why would someone leave that there? [if there is something on the s_0]On the counter you see [a list of things on the s_0]. Something scurries by right in the corner of your eye. Probably nothing.[end if][if there is nothing on the s_0]The counter appears to be empty. This always happens![end if]\n\nThere is an exit to the east. Don't worry, it is unguarded. There is an unguarded exit to the north.", "definite": null, "noun": null, "synonyms": null, "indefinite": null}], ["r_3", {"room_type": "storage", "adj": null, "id": "r_3", "type": "r", "name": "vegetable market", "desc": "You are in a vegetable market. A normal one.\n\n\n\nYou don't like doors? Why not try going west, that entranceway is unblocked.", "definite": null, "noun": null, "synonyms": null, "indefinite": null}], ["r_4", {"room_type": "storage", "adj": null, "id": "r_4", "type": "r", "name": "garden", "desc": "You arrive in a garden. An usual one. You can barely contain your excitement.\n\n\n\nThere is an exit to the south. Don't worry, it is unguarded.", "definite": null, "noun": null, "synonyms": null, "indefinite": null}], ["f_0", {"room_type": "storage", "adj": null, "id": "f_0", "type": "f", "name": "lettuce", "desc": "that's a normal lettuce!", "definite": null, "noun": null, "synonyms": null, "indefinite": null}], ["s_0", {"room_type": "storage", "adj": null, "id": "s_0", "type": "s", "name": "counter", "desc": "The counter is unstable.", "definite": null, "noun": null, "synonyms": null, "indefinite": null}]], "quests": [{"fail_events": [], "desc": "You are now playing a fast paced game of TextWorld! Here is your task for today. First step, make an attempt to go south. And then, make an effort to head east. Then, attempt to go east. That's it!", "commands": ["go south", "go east", "go east"], "reward": 10, "win_events": [{"condition": {"preconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "event"}], "name": "trigger"}, "commands": ["go south", "go east", "go east"], "actions": [{"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/south"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}], "name": "go/east"}]}]}, {"fail_events": [], "desc": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First off, if it's not too much trouble, I need you to try to take a trip south. With that done, make an attempt to venture east. Once you succeed at that, take a trip east. And then, lift the lettuce from the floor of the vegetable market. After taking the lettuce, move west. And then, venture west. And then, rest the lettuce on the counter. Alright, thanks!", "commands": ["go south", "go east", "go east", "take lettuce", "go west", "go west", "put lettuce on counter"], "reward": 5, "win_events": [{"condition": {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_0"}], "name": "on"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_0"}], "name": "on"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "f", "name": "f_0"}, {"type": "r", "name": "r_0"}, {"type": "s", "name": "s_0"}], "name": "event"}], "name": "trigger"}, "commands": ["go south", "go east", "go east", "take lettuce", "go west", "go west", "put lettuce on counter"], "actions": [{"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/south"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "r", "name": "r_3"}], "name": "at"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}], "name": "take"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_0"}], "name": "on"}], "name": "put"}]}]}], "extras": {}, "grammar": {"allowed_variables_numbering": false, "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "blend_instructions": false, "only_last_action": false, "names_to_exclude": [], "theme": "house", "unique_expansion": false}, "metadata": {"desc": "Generated with textworld.GameMaker."}, "world": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}], "main_quest": {"fail_events": [], "desc": "Welcome to another exciting round of TextWorld! Your first objective is to go to the south. And then, go east. And then, attempt to venture east. With that accomplished, pick up the lettuce from the floor of the vegetable market. If you can get your hands on the lettuce, try to go to the west. Then, venture west. Then, put the lettuce on the counter inside the kitchen. And once you've done that, you win!", "commands": ["go south", "go east", "go east", "take lettuce", "go west", "go west", "put lettuce on counter"], "reward": 1, "win_events": [{"condition": {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_0"}], "name": "on"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_0"}], "name": "on"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "f", "name": "f_0"}, {"type": "r", "name": "r_0"}, {"type": "s", "name": "s_0"}], "name": "event"}], "name": "trigger"}, "commands": [], "actions": [{"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/south"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "r", "name": "r_3"}], "name": "at"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}], "name": "take"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_0"}], "name": "on"}], "name": "put"}]}]}, "KB": {"logic": "# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/x/TextWorld/venv/lib/python3.5/site-packages/textworld/generator/data/text_grammars"}}
