{"objective": "You are hungry! Let's cook a delicious meal. Check the cookbook in the kitchen for the recipe. Once done, enjoy your meal!", "KB": {"text_grammars_path": "./textworld_data/text_grammars", "logic": "## box: i.e. portable container\n#type box : c, o {\n#\n#    predicates {\n#\n#        reachable_box_I(P, I, box) = in(box, I);\n#        reachable_box_r(P, r, box) = at(P, r) & at(box, r);\n#        reachable_box_s(P, r, s, box) = at(P, r) & at(s, r) & on(box, s);\n#        reachable_box_c(P, r, c, box) = at(P, r) & at(c, r) & open(c) & in(box, c);\n#    }\n#\n#    rules {\n#        insert/box :: $reachable_box_I(P, I, box) & $open(box) & in(o, I) -> in(o, box);\n#        insert/box/s :: $reachable_box_s(P, r, s, box) & in(o, I) -> in(o, box);\n#        insert/box/c :: $reachable_box_c(P, r, c, box) & in(o, I) -> in(o, box);\n#    }\n#\n#    inform7 {\n#        type {\n#            kind :: \"box-like\";\n#            definition :: \"box-like is a kind of container. box-like is portable.\";\n#        }\n#\n#        commands {\n#            insert/box :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/s :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/c :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#        }\n#    }\n#}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr2 :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    predicates {\n        sharp(t);\n        cuttable(t);\n        cookable(t);\n        drinkable(t);\n    }\n\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"a thing can be drinkable. a thing is usually not drinkable. a thing can be cookable. a thing is usually not cookable. a thing can be damaged. a thing is usually not damaged. a thing can be sharp. a thing is usually not sharp. a thing can be cuttable. a thing is usually not cuttable. a thing can be a source of heat. Type of cooking is a kind of value. The type of cooking are raw, grilled, roasted and fried. a thing can be needs cooking. Type of cutting is a kind of value. The type of cutting are uncut, sliced, diced and chopped.\";\n        }\n\n        predicates {\n            sharp(t) :: \"The {t} is sharp\";\n            cookable(t) :: \"The {t} is cookable\";\n            cuttable(t) :: \"The {t} is cuttable\";\n            drinkable(t) :: \"The {t} is drinkable\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\ntype object {\n    inform7 {\n        type {\n            kind :: \"object\";\n        }\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# stove\ntype stove : s {\n    rules {\n        cook/stove/burned :: $at(P, r) & $at(stove, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/stove/cooked/raw :: $at(P, r) & $at(stove, r) & $in(f, I) & raw(f)            -> fried(f) & cooked(f);\n        cook/stove/cooked/needs_cooking :: $at(P, r) & $at(stove, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> fried(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"stove-like\";\n            definition :: \"stove-like is a source of heat.\";\n        }\n\n        commands {\n            cook/stove/cooked/raw           :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/cooked/needs_cooking :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/burned               :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        consumed(f);\n        edible(f);\n        inedible(f);\n\n        needs_cooking(f);\n        raw(f);\n        cooked(f);\n        burned(f);\n\n        roasted(f);\n        fried(f);\n        grilled(f);\n        # boiled(f);\n        # steamed(f);\n\n        uncut(f);\n        chopped(f);\n        sliced(f);\n        diced(f);\n    }\n\n    rules {\n        eat :: in(f, I) & edible(f) & used(slot) -> consumed(f) & free(slot);\n        drink :: in(f, I) & drinkable(f) & used(slot) -> consumed(f) & free(slot);\n        slice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> sliced(f);\n        dice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> diced(f);\n        chop :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> chopped(f);\n    }\n\n    constraints {\n        consumed1 :: consumed(f) & in(f, I) -> fail();\n        consumed2 :: consumed(f) & in(f, c) -> fail();\n        consumed3 :: consumed(f) & on(f, s) -> fail();\n        consumed4 :: consumed(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is usually edible. food is cookable. food has a type of cooking. food has a type of cutting. food can be cooked. food can be burned. food can be consumed. food is usually not consumed. food is usually cuttable.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            inedible(f) :: \"The {f} is inedible\";\n            consumed(f) :: \"The {f} is consumed\";\n\n            needs_cooking(f) :: \"The {f} is needs cooking\";\n\n            raw(f) :: \"The {f} is raw\";\n            cooked(f) :: \"The {f} is cooked\";\n            burned(f) :: \"The {f} is burned\";\n            fried(f) :: \"The {f} is fried\";\n            grilled(f) :: \"The {f} is grilled\";\n            roasted(f) :: \"The {f} is roasted\";\n\n            uncut(f) :: \"The {f} is uncut\";\n            sliced(f) :: \"The {f} is sliced\";\n            chopped(f) :: \"The {f} is chopped\";\n            diced(f) :: \"The {f} is diced\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n            drink :: \"drink {f}\" :: \"drinking the {f}\";\n            slice :: \"slice {f} with {o}\" :: \"slicing the {f} with the {o}\";\n            dice  :: \"dice {f} with {o}\"  :: \"dicing the {f} with the {o}\";\n            chop  :: \"chop {f} with {o}\"  :: \"chopping the {f} with the {o}\";\n        }\n\n        code :: \"\"\"\n            [Drinking liquid]\n            Drinking carried thing is an action applying to one carried thing.\n            The block drinking rule is not listed in any rulebook.\n            Understand nothing as drinking.\n            Understand \"drink [something]\" as drinking carried thing.\n\n            After drinking carried thing:\n                Now the noun is consumed;\n                Continue the action.\n\n            Check an actor drinking carried thing (this is the can\u2019t drink unless drinkable rule):\n                if the noun is not a thing or the noun is not drinkable:\n                    say \"You cannot drink [the noun].\";\n                    rule fails;\n\n            Carry out an actor drinking carried thing (this is the drinking rule):\n                remove the noun from play.\n\n            Report an actor drinking carried thing (this is the report drinking rule):\n                if the actor is the player:\n                    say \"You drink [the noun]. Not bad.\";\n                otherwise:\n                    say \"[The person asked] just drunk [the noun].\".\n\n            [Eating food]\n            After eating a food (called target):\n                Now the target is consumed;\n                Continue the action.\n\n            Check eating inedible food (called target):\n                if target is needs cooking:\n                    say \"You should cook [the target] first.\";\n                    rule fails.\n\n            [Understanding things by their properties - http://inform7.com/learn/man/WI_17_15.html]\n            Understand the type of cutting property as describing food.\n            Understand the type of cooking property as describing food.\n\n            [Processing food]\n            Understand the commands  \"slice\", \"prune\" as something new.\n            The block cutting rule is not listed in any rulebook.\n            Dicing it with is an action applying to two carried things.\n            Slicing it with is an action applying to two carried things.\n            Chopping it with is an action applying to two carried things.\n\n            Slicing something with something is a cutting activity.\n            Dicing something with something is a cutting activity.\n            Chopping something with something is a cutting activity.\n\n            Does the player mean slicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean chopping something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean dicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Check an actor cutting (this is the generic cut is now allowed rule):\n                say \"You need to specify how you want to cut [the noun]. Either slice, dice, or chop it.\";\n                rule fails.\n\n            Before a cutting activity when the noun is not cuttable:\n                say \"Can only cut cuttable food.\";\n                rule fails.\n\n            Before a cutting activity when the noun is cuttable and the noun is not uncut:\n                say \"[The noun] is already [type of cutting of the noun].\";\n                rule fails.\n\n            Before a cutting activity when the second noun is not sharp:\n                say \"Cutting something requires a knife.\";\n                rule fails.\n\n            Before printing the name of a food (called the food item) which is not uncut while looking, examining, listing contents or taking inventory:\n                say \"[type of cutting of food item] \".\n\n            [Slicing food]\n            Carry out slicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"[The food item] is already [type of cutting of the food item].\";\n                    stop;\n                Now the food item is sliced;\n                say \"You slice the [food item].\".\n\n            Understand \"slice [something] with/using [something]\" as slicing it with.\n\n            [Dicing food]\n            Carry out dicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is diced;\n                say \"You dice the [food item].\".\n\n            Understand \"dice [something] with/using [something]\" as dicing it with.\n\n            [Chopping food]\n            Carry out chopping a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is chopped;\n                say \"You chop the [food item].\".\n\n            Understand the command \"chop\" as something new. [Remove its association with slicing]\n            Understand \"chop [something] with/using [something]\" as chopping it with.\n\n            [Cooking food]\n            Cooking it with is an action applying to one carried thing and one thing.\n\n            Does the player mean cooking something with something carried:\n                it is very unlikely;\n\n            Check cooking something not cookable with something (this is the cook only cookable things rule):\n                say \"Can only cook food.\" instead.\n\n            Check cooking something cookable with something not a source of heat (this is the cooking requires a source of heat rule):\n                say \"Cooking requires a source of heat.\" instead.\n\n            Carry out cooking a carried food (called the food item) with a thing (called a the source of heat):\n                if the food item is cooked:\n                    Now the food item is burned;\n                    Now the food item is not edible;\n                    say \"You burned the [food item]!\";\n                    stop;\n                otherwise:\n                    Now the food item is cooked;\n                if the food item is needs cooking:\n                    Now the food item is edible;\n                    Now the food item is not needs cooking;\n                if the source of heat is a stove-like:\n                    Now the food item is fried;\n                    say \"You fried the [food item].\";\n                else if the source of heat is a oven-like:\n                    Now the food item is roasted;\n                    say \"You roasted the [food item].\";\n                else if the source of heat is a toaster-like:\n                    Now the food item is grilled;\n                    say \"You grilled the [food item].\".\n\n            Understand \"cook [something] with/in/on/using [something]\" as cooking it with.\n\n            Before printing the name of a food (called the food item) while looking, examining, listing contents or taking inventory:\n                if the food item is needs cooking:\n                    say \"raw \";\n                else if the food item is burned:\n                    say \"burned \";\n                else if the food item is not raw:\n                    say \"[type of cooking of food item] \".\n\n        \"\"\";\n    }\n}\n\n# Player\ntype P {\n    inform7 {\n        code :: \"\"\"\n            The carrying capacity of the player is 0.\n        \"\"\";\n    }\n\n}\n\ntype ingredient : t {\n    predicates {\n        base(f, ingredient);\n\n        raw(ingredient);\n        roasted(ingredient);\n        fried(ingredient);\n        # cooked(ingredient);\n\n        uncut(ingredient);\n        chopped(ingredient);\n        sliced(ingredient);\n        diced(ingredient);\n    }\n\n    inform7 {\n        predicates {\n            #base(f, ingredient) :: \"When play begins, the base of {ingredient} is {f}\";\n            base(f, ingredient) :: \"The base of {ingredient} is {f}\";\n\n            raw(ingredient) :: \"The {ingredient} is raw\";\n            # cooked(ingredient) :: \"The base of {ingredient} is cooked\";\n            fried(ingredient) :: \"The {ingredient} is fried\";\n            grilled(ingredient) :: \"The {ingredient} is grilled\";\n            roasted(ingredient) :: \"The {ingredient} is roasted\";\n\n            uncut(ingredient) :: \"The {ingredient} is uncut\";\n            sliced(ingredient) :: \"The {ingredient} is sliced\";\n            chopped(ingredient) :: \"The {ingredient} is chopped\";\n            diced(ingredient) :: \"The {ingredient} is diced\";\n        }\n\n        type {\n            kind :: \"ingredient-like\";\n            definition :: \"ingredient-like has a thing called base. ingredient-like has a type of cooking. ingredient-like has a type of cutting.\";\n        }\n    }\n}\n\n# meal\ntype meal : f {\n    inform7 {\n        type {\n            kind :: \"meal-like\";\n        }\n    }\n}\n\ntype RECIPE {\n    predicates {\n        ingredient_1(f);\n        ingredient_2(f);\n        ingredient_3(f);\n        cooking_location(r, RECIPE);\n        in(ingredient, RECIPE);\n        out(meal, RECIPE);\n        player_in_cooking_location(P, r) = at(P, r) & cooking_location(r, RECIPE);\n    }\n\n    rules {\n        make/recipe/1 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & $out(meal, RECIPE) -> in(meal, I) & edible(meal);\n        make/recipe/2 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & $out(meal, RECIPE) & $used(slot) & used(slot') -> in(meal, I) & free(slot') & edible(meal);\n        make/recipe/3 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') -> in(meal, I) & free(slot') & free(slot'') & edible(meal);\n    }\n\n    inform7 {\n        predicates {\n            ingredient_1(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_2(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_3(f) :: \"\";  # No equivalent in Inform7.\n            cooking_location(r, RECIPE) :: \"The cooking location of the {RECIPE} is the {r}.\";\n            in(ingredient, RECIPE) :: \"When play begins, add {ingredient} to the ingredients of the {RECIPE}\";\n            out(meal, RECIPE) :: \"The meal of the {RECIPE} is the {meal}.\";\n        }\n\n        type {\n            kind :: \"recipe-like\";\n            definition :: \"A recipe-like is a kind of thing. A recipe-like has a list of ingredient-like called ingredients. A recipe-like has a thing called meal. A recipe-like has a room called cooking location.\";\n        }\n\n        commands {\n            make/recipe/1 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/2 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/3 :: \"prepare meal\" :: \"preparing meal\";\n        }\n\n        code :: \"\"\"\n            [Ingredient]\n            Rule for printing the name of an ingredient-like (called I):\n                if type of cutting of I is not uncut:\n                    say  \"[type of cutting of I] \";\n                if type of cooking of I is not raw:\n                    say  \"[type of cooking of I] \";\n                say  \"[base of I]\";\n\n            [Preparing a meal]\n            Preparing meal is an action applying to nothing.\n            Before preparing meal:\n                if location is not the cooking location of the recipe:\n                    say \"Can only prepare meal in the [cooking location of the recipe].\";\n                    rule fails;\n                Repeat with ingredient running through the ingredients of the recipe:\n                    let F be the base of the ingredient;\n                    if player does not carry the F:\n                        say \"The recipe requires [a ingredient].\";\n                        rule fails;\n                    if type of cooking of F is not type of cooking of ingredient:\n                        say \"The recipe requires [a ingredient].\";\n                        rule fails;\n                    if type of cutting of F is not type of cutting of ingredient:\n                        say \"The recipe requires [a ingredient].\";\n                        rule fails;\n\n            Carry out preparing meal:\n                say \"Adding the meal to your inventory.\";\n                Repeat with ingredient running through the ingredients of recipe:\n                    now the base of the ingredient is nowhere;\n                now the player carries the meal of the recipe;\n                set pronouns from the meal of the recipe.\n\n            Understand \"prepare meal\" as preparing meal.\n        \"\"\";\n    }\n}\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n\n        code :: \"\"\"\n            After examining a supporter which contains nothing:\n                say \"It's empty.\".\n        \"\"\";\n    }\n}\n\n# oven\ntype oven : c {\n    rules {\n        cook/oven/burned :: $at(P, r) & $at(oven, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/oven/cooked/raw :: $at(P, r) & $at(oven, r) & $in(f, I) & raw(f)            -> roasted(f) & cooked(f);\n        cook/oven/cooked/needs_cooking :: $at(P, r) & $at(oven, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> roasted(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"oven-like\";\n            definition :: \"oven-like is a source of heat.\";\n        }\n\n        commands {\n            cook/oven/cooked/raw           :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/cooked/needs_cooking :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/burned               :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n        }\n    }\n}\n\ntype toaster : c {\n    rules {\n        cook/toaster/burned :: $at(P, r) & $at(toaster, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/toaster/cooked/raw :: $at(P, r) & $at(toaster, r) & $in(f, I) & raw(f)            -> grilled(f) & cooked(f);\n        cook/toaster/cooked/needs_cooking :: $at(P, r) & $at(toaster, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> grilled(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"toaster-like\";\n            definition :: \"toaster-like is a source of heat.\";\n        }\n\n        commands {\n            cook/toaster/cooked/raw           :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/cooked/needs_cooking :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/burned               :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n\n        code :: \"\"\"\n            After examining an open container which contains nothing:\n                say \"It's empty.\".\n        \"\"\";\n    }\n}\n\n# Inventory\ntype slot {\n    predicates {\n        free(slot);\n        used(slot);\n    }\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"\";\n        }\n        predicates {\n            free(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n            used(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n        }\n    }\n}\n\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        take :: $at(P, r) & at(o, r) & free(slot) -> in(o, I) & used(slot);\n        drop :: $at(P, r) & in(o, I) & used(slot) -> at(o, r) & free(slot);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) & free(slot) -> in(o, I) & used(slot);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) & used(slot) -> in(o, c) & free(slot);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) & free(slot) -> in(o, I) & used(slot);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) & used(slot) -> on(o, s) & free(slot);\n\n        examine/I :: at(o, I) -> at(o, I);\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);\n    }\n\n    reverse_rules {\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n\n        look :: at(P, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(s, r) :: \"The {s} is in {r}\";\n            at(c, r) :: \"The {c} is in {r}\";\n            at(o, r) :: \"The {o} is in {r}\";\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n## pot\n#type pot : box {\n#\n#    inform7 {\n#        type {\n#            kind :: \"pot-like\";\n#            definition :: \"pot-like is a kind of box-like.\";\n#        }\n#\n#    }\n#}\n\n"}, "metadata": {"walkthrough": ["go south", "go east", "go north", "go east", "go south", "take banana from container", "go north", "go west", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "open blue door", "go north", "take tomato", "open blue door", "go south", "go south", "cook banana with oven", "cook tomato with stove", "take knife from cutlery shop", "chop banana with knife", "drop knife", "take knife", "slice lettuce with knife", "drop knife", "take knife", "chop parsley with knife", "drop knife", "take knife", "slice tomato with knife", "drop knife", "prepare meal", "eat meal"], "max_score": 30, "seeds": {"quest": 64477, "grammar": 34517, "objects": 28823, "map": 50594}, "uuid": "tw-cooking-recipe3+cook+cut+go1-xROXurJOHdKyU16E", "ingredients": [["banana", "roasted", "chopped"], ["lettuce", "raw", "sliced"], ["parsley", "raw", "chopped"], ["tomato", "fried", "sliced"]], "settings": {"third_party": null, "blend_descriptions": false, "overview": false, "go": 1, "only_last_action": false, "open": false, "blend_instructions": false, "verbose": false, "output": "tw_games/finale_level5.ulx", "save_overview": false, "take": 0, "subcommand": "tw-cooking", "recipe": 3, "cook": true, "cut": true, "force": false, "drop": false, "entity_numbering": false, "ambiguous_instructions": false, "format": "ulx", "theme": "house", "list": false, "silent": false, "split": null, "seed": 51748, "include_adj": false}, "entities": ["table", "meal", "livingroom", "parsley", "fruit shop", "container", "veggie market", "blue key", "blue door", "knife", "kitchen", "sofa", "shelf", "fridge", "stove", "tomato", "patio chair", "open space", "sofa", "play room", "showcase", "backyard", "supermarket", "shelf", "patio chair", "chest key", "garden", "counter", "lettuce", "table", "cutlery shop", "showcase", "banana", "spare room", "table", "oven"]}, "version": 1, "grammar": {"blend_instructions": false, "allowed_variables_numbering": false, "blend_descriptions": false, "names_to_exclude": [], "only_last_action": false, "unique_expansion": false, "theme": "house", "ambiguous_instructions": false, "include_adj": false}, "extras": {"walkthrough": ["go south", "go east", "go north", "go east", "go south", "take banana from container", "go north", "go west", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "open blue door", "go north", "take tomato", "open blue door", "go south", "go south", "cook banana with oven", "cook tomato with stove", "take knife from cutlery shop", "chop banana with knife", "drop knife", "take knife", "slice lettuce with knife", "drop knife", "take knife", "chop parsley with knife", "drop knife", "take knife", "slice tomato with knife", "drop knife", "prepare meal", "eat meal"], "recipe": "\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\n  banana\n  lettuce\n  parsley\n  tomato\n\nDirections:\n  chop the banana\n  roast the banana\n  slice the lettuce\n  chop the parsley\n  slice the tomato\n  fry the tomato\n  prepare meal\n"}, "world": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "c", "name": "c_0"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "c", "name": "c_1"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_1"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "k", "name": "k_0"}, {"type": "r", "name": "r_1"}], "name": "at"}, {"arguments": [{"type": "k", "name": "k_1"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "o", "name": "o_0"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "oven", "name": "oven_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_1"}, {"type": "r", "name": "r_1"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_10"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_11"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_2"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_3"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_4"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_5"}, {"type": "r", "name": "r_7"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_6"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_7"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_8"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_9"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "stove", "name": "stove_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "ingredient", "name": "ingredient_1"}], "name": "base"}, {"arguments": [{"type": "f", "name": "f_1"}, {"type": "ingredient", "name": "ingredient_3"}], "name": "base"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "ingredient", "name": "ingredient_2"}], "name": "base"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "ingredient", "name": "ingredient_0"}], "name": "base"}, {"arguments": [{"type": "ingredient", "name": "ingredient_0"}], "name": "chopped"}, {"arguments": [{"type": "ingredient", "name": "ingredient_2"}], "name": "chopped"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "cookable"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "cookable"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "cookable"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "cooking_location"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "cuttable"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_1"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_9"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_3"}], "name": "east_of"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "edible"}, {"arguments": [{"type": "meal", "name": "meal_0"}], "name": "edible"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_1"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_1"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_10"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_0"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_1"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_2"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_3"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_4"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_5"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_6"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_7"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_8"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_9"}], "name": "free"}, {"arguments": [{"type": "ingredient", "name": "ingredient_3"}], "name": "fried"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "c", "name": "c_0"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_0"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_1"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_2"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_3"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "ingredient_1"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "ingredient_2"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "ingredient_3"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "ingredient_4"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "d", "name": "d_0"}, {"type": "r", "name": "r_6"}], "name": "link"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "d", "name": "d_0"}, {"type": "r", "name": "r_5"}], "name": "link"}, {"arguments": [{"type": "c", "name": "c_0"}], "name": "locked"}, {"arguments": [{"type": "d", "name": "d_0"}], "name": "locked"}, {"arguments": [{"type": "k", "name": "k_0"}, {"type": "d", "name": "d_0"}], "name": "match"}, {"arguments": [{"type": "k", "name": "k_1"}, {"type": "c", "name": "c_0"}], "name": "match"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_9"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_5"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "north_of"}, {"arguments": [{"type": "c", "name": "c_1"}], "name": "open"}, {"arguments": [{"type": "meal", "name": "meal_0"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "out"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "raw"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "raw"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "raw"}, {"arguments": [{"type": "ingredient", "name": "ingredient_1"}], "name": "raw"}, {"arguments": [{"type": "ingredient", "name": "ingredient_2"}], "name": "raw"}, {"arguments": [{"type": "ingredient", "name": "ingredient_0"}], "name": "roasted"}, {"arguments": [{"type": "o", "name": "o_0"}], "name": "sharp"}, {"arguments": [{"type": "ingredient", "name": "ingredient_1"}], "name": "sliced"}, {"arguments": [{"type": "ingredient", "name": "ingredient_3"}], "name": "sliced"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_6"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_7"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_10"}], "name": "south_of"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "uncut"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_1"}, {"type": "r", "name": "r_0"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "west_of"}], "quests": [{"desc": "Hello and welcome to the amazing world of text that is TextWorld!! Here is your task for today. First step, attempt to go south. Okay, and then, move east. After that, take a trip east. And that's it, another successful game of TextWorld!", "win_events": [{"actions": [{"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/south"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}], "name": "go/east"}], "commands": ["go south", "go east", "go east"], "condition": {"preconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "event"}], "name": "trigger"}}], "commands": ["go south", "go east", "go east"], "fail_events": [], "reward": 10}, {"desc": "", "win_events": [{"actions": [], "commands": [], "condition": {"preconditions": [{"arguments": [{"type": "f", "name": "f_3"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}], "postconditions": [{"arguments": [{"type": "f", "name": "f_3"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "c", "name": "c_1"}, {"type": "f", "name": "f_3"}], "name": "event"}], "name": "trigger"}}], "commands": [], "fail_events": [], "reward": 5}, {"desc": "", "win_events": [{"actions": [], "commands": [], "condition": {"preconditions": [{"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_11"}], "name": "on"}], "postconditions": [{"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_11"}], "name": "on"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_11"}], "name": "event"}], "name": "trigger"}}], "commands": [], "fail_events": [], "reward": 5}, {"desc": "", "win_events": [{"actions": [], "commands": [], "condition": {"preconditions": [{"arguments": [{"type": "f", "name": "f_2"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "o", "name": "o_0"}, {"type": "s", "name": "s_11"}], "name": "on"}], "postconditions": [{"arguments": [{"type": "f", "name": "f_2"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "o", "name": "o_0"}, {"type": "s", "name": "s_11"}], "name": "on"}, {"arguments": [{"type": "c", "name": "c_1"}, {"type": "f", "name": "f_2"}, {"type": "o", "name": "o_0"}, {"type": "s", "name": "s_11"}], "name": "event"}], "name": "trigger"}}], "commands": [], "fail_events": [], "reward": 5}, {"desc": "", "win_events": [{"actions": [], "commands": [], "condition": {"preconditions": [{"arguments": [{"type": "f", "name": "f_1"}, {"type": "s", "name": "s_11"}], "name": "on"}], "postconditions": [{"arguments": [{"type": "f", "name": "f_1"}, {"type": "s", "name": "s_11"}], "name": "on"}, {"arguments": [{"type": "f", "name": "f_1"}, {"type": "s", "name": "s_11"}], "name": "event"}], "name": "trigger"}}], "commands": [], "fail_events": [], "reward": 5}], "infos": [["P", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "P", "desc": null, "id": "P", "synonyms": null, "definite": null, "name": null}], ["I", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "I", "desc": null, "id": "I", "synonyms": null, "definite": null, "name": null}], ["r_0", {"room_type": "storage", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You arrive in a kitchen. A normal one.\n\n You make out [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] conventional looking fridge right there by you.[if c_1 is open and there is something in the c_1] The fridge contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You see a gleam over in a corner, where you can see an oven. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[if oven_0 is open and there is something in the oven_0] The oven contains [a list of things in the oven_0].[end if][if oven_0 is open and the oven_0 contains nothing] The oven is empty, what a horrible day![end if] You see a counter. [if there is something on the s_11]On the counter you can see [a list of things on the s_11]. You shudder, but continue examining the room.[end if][if there is nothing on the s_11]Unfortunately, there isn't a thing on it. It would have been so cool if there was stuff on the counter! oh well.[end if] You can make out a stove. [if there is something on the stove_0]On the stove you can make out [a list of things on the stove_0].[end if][if there is nothing on the stove_0]The stove appears to be empty. You move on, clearly upset by TextWorld.[end if]\n\nYou need an exit without a door? You should try going east. You need an exit without a door? You should try going north. You need an exit without a door? You should try going west.", "id": "r_0", "synonyms": null, "definite": null, "name": "kitchen"}], ["r_1", {"room_type": "work", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You are in an open space. A standard one.\n\n You smell a hideous smell, and follow it to a showcase. The showcase is typical.[if there is something on the s_1] On the showcase you can make out [a list of things on the s_1].[end if][if there is nothing on the s_1] However, the showcase, like an empty showcase, has nothing on it.[end if]\n\nThere is an exit to the east.", "id": "r_1", "synonyms": null, "definite": null, "name": "open space"}], ["r_2", {"room_type": "cook", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You've just walked into a livingroom.\n\n You make out a sofa. The sofa is standard.[if there is something on the s_2] On the sofa you make out [a list of things on the s_2].[end if][if there is nothing on the s_2] But the thing is empty, unfortunately.[end if] You make out a shelf. Why don't you take a picture of it, it'll last longer! [if there is something on the s_3]You see [a list of things on the s_3] on the shelf.[end if][if there is nothing on the s_3]But there isn't a thing on it. It would have been so cool if there was stuff on the shelf.[end if]\n\nYou need an exit without a door? You should try going east. You need an exit without a door? You should try going north. There is an exit to the west. Don't worry, there is no door.", "id": "r_2", "synonyms": null, "definite": null, "name": "livingroom"}], ["r_4", {"room_type": "rest", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You've just shown up in a veggie market.\n\n You can make out a table. [if there is something on the s_10]You see [a list of things on the s_10] on the table.[end if][if there is nothing on the s_10]But the thing hasn't got anything on it.[end if]\n\nYou don't like doors? Why not try going west, that entranceway is not blocked by one.", "id": "r_4", "synonyms": null, "definite": null, "name": "veggie market"}], ["r_5", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You find yourself in a garden. A typical one. You begin to take stock of what's in the room.\n\n You can see a sofa. You shudder, but continue examining the sofa. The sofa is usual.[if there is something on the s_0] On the sofa you can see [a list of things on the s_0].[end if][if there is nothing on the s_0] But the thing hasn't got anything on it.[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] blue door leading north. There is an exit to the south. Don't worry, there is no door. There is an exit to the west.", "id": "r_5", "synonyms": null, "definite": null, "name": "garden"}], ["r_9", {"room_type": "storage", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You've entered a backyard.\n\n Were you looking for a patio chair? Because look over there, it's a patio chair. What a coincidence, weren't you just thinking about a patio chair? The patio chair is ordinary.[if there is something on the s_8] On the patio chair you make out [a list of things on the s_8].[end if][if there is nothing on the s_8] But the thing is empty, unfortunately.[end if]\n\nThere is an exit to the east. There is an exit to the north.", "id": "r_9", "synonyms": null, "definite": null, "name": "backyard"}], ["r_7", {"room_type": "storage", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You've entered a spare room.\n\n You lean against the wall, inadvertently pressing a secret button. The wall opens up to reveal a patio chair. The patio chair is typical.[if there is something on the s_5] On the patio chair you can see [a list of things on the s_5].[end if][if there is nothing on the s_5] But there isn't a thing on it.[end if]\n\nYou don't like doors? Why not try going south, that entranceway is not blocked by one. There is an exit to the west. Don't worry, there is no door.", "id": "r_7", "synonyms": null, "definite": null, "name": "spare room"}], ["r_3", {"room_type": "rest", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You find yourself in a play room. An ordinary one. You begin to take stock of what's here.\n\n You can make out a showcase. [if there is something on the s_4]On the showcase you can make out [a list of things on the s_4]. It doesn't get more TextWorld than this![end if][if there is nothing on the s_4]Looks like someone's already been here and taken everything off it, though.[end if]\n\nThere is an exit to the east. Don't worry, there is no door. You don't like doors? Why not try going south, that entranceway is not blocked by one.", "id": "r_3", "synonyms": null, "definite": null, "name": "play room"}], ["r_10", {"room_type": "rest", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "You've just walked into a cutlery shop. Okay, just remember what you're here to do, and everything will go great.\n\n You can make out a table. [if there is something on the s_9]On the table you make out [a list of things on the s_9].[end if][if there is nothing on the s_9]Unfortunately, there isn't a thing on it.[end if]\n\nThere is an exit to the south. Don't worry, there is no door.", "id": "r_10", "synonyms": null, "definite": null, "name": "cutlery shop"}], ["r_8", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "Well, here we are in a fruit shop.\n\n You can make out a container.[if c_0 is open and there is something in the c_0] The container contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You hear a noise behind you and spin around, but you can't see anything other than a table. [if there is something on the s_6]You see [a list of things on the s_6] on the table.[end if][if there is nothing on the s_6]But oh no! there's nothing on this piece of garbage.[end if]\n\nThere is an exit to the north.", "id": "r_8", "synonyms": null, "definite": null, "name": "fruit shop"}], ["r_6", {"room_type": "storage", "adj": null, "indefinite": null, "noun": null, "type": "r", "desc": "Well, here we are in a supermarket. You start to take note of what's in the room.\n\n Were you looking for a shelf? Because look over there, it's a shelf. Why don't you take a picture of it, it'll last longer! The shelf is typical.[if there is something on the s_7] On the shelf you can see [a list of things on the s_7]. There's something strange about this being here, but you can't put your finger on it.[end if][if there is nothing on the s_7] Unfortunately, there isn't a thing on it. What, you think everything in TextWorld should have stuff on it?[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] blue door leading south.", "id": "r_6", "synonyms": null, "definite": null, "name": "supermarket"}], ["d_0", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "d", "desc": "The [noun] looks stuffy. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "id": "d_0", "synonyms": null, "definite": null, "name": "blue door"}], ["c_0", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "c", "desc": "The [noun] looks noble. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "id": "c_0", "synonyms": null, "definite": null, "name": "container"}], ["c_1", {"room_type": "storage", "adj": "conventional", "indefinite": null, "noun": "fridge", "type": "c", "desc": "The [noun] looks imposing. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "id": "c_1", "synonyms": null, "definite": null, "name": "fridge"}], ["f_0", {"room_type": "rest", "adj": "", "indefinite": null, "noun": "lettuce", "type": "f", "desc": "You couldn't pay me to eat that [noun].", "id": "f_0", "synonyms": null, "definite": null, "name": "lettuce"}], ["f_1", {"room_type": "storage", "adj": "", "indefinite": null, "noun": "tomato", "type": "f", "desc": "The [noun] looks tantalizing.", "id": "f_1", "synonyms": null, "definite": null, "name": "tomato"}], ["f_2", {"room_type": "storage", "adj": "", "indefinite": null, "noun": "parsley", "type": "f", "desc": "That's a [noun]!", "id": "f_2", "synonyms": null, "definite": null, "name": "parsley"}], ["k_0", {"room_type": "work", "adj": null, "indefinite": null, "noun": null, "type": "k", "desc": "The [noun] is cold to the touch", "id": "k_0", "synonyms": null, "definite": null, "name": "blue key"}], ["k_1", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "k", "desc": "The [noun] is weighty.", "id": "k_1", "synonyms": null, "definite": null, "name": "chest key"}], ["o_0", {"room_type": "rest", "adj": "sharp", "indefinite": null, "noun": "knife", "type": "o", "desc": "The [noun] is dirty.", "id": "o_0", "synonyms": null, "definite": null, "name": "knife"}], ["oven_0", {"room_type": "storage", "adj": "conventional", "indefinite": null, "noun": "oven", "type": "oven", "desc": "Useful for roasting things.", "id": "oven_0", "synonyms": null, "definite": null, "name": "oven"}], ["s_0", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is solid.", "id": "s_0", "synonyms": null, "definite": null, "name": "sofa"}], ["s_1", {"room_type": "work", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is stable.", "id": "s_1", "synonyms": null, "definite": null, "name": "showcase"}], ["s_10", {"room_type": "rest", "adj": "massive", "indefinite": null, "noun": "table", "type": "s", "desc": "The [noun] is shaky.", "id": "s_10", "synonyms": null, "definite": null, "name": "table"}], ["s_11", {"room_type": "storage", "adj": "vast", "indefinite": null, "noun": "counter", "type": "s", "desc": "The [noun] is reliable.", "id": "s_11", "synonyms": null, "definite": null, "name": "counter"}], ["s_2", {"room_type": "cook", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is shaky.", "id": "s_2", "synonyms": null, "definite": null, "name": "sofa"}], ["s_3", {"room_type": "cook", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is solid.", "id": "s_3", "synonyms": null, "definite": null, "name": "shelf"}], ["s_4", {"room_type": "rest", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is an unstable piece of garbage.", "id": "s_4", "synonyms": null, "definite": null, "name": "showcase"}], ["s_5", {"room_type": "storage", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is wobbly.", "id": "s_5", "synonyms": null, "definite": null, "name": "patio chair"}], ["s_6", {"room_type": "clean", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is reliable.", "id": "s_6", "synonyms": null, "definite": null, "name": "table"}], ["s_7", {"room_type": "storage", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is shaky.", "id": "s_7", "synonyms": null, "definite": null, "name": "shelf"}], ["s_8", {"room_type": "storage", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is reliable.", "id": "s_8", "synonyms": null, "definite": null, "name": "patio chair"}], ["s_9", {"room_type": "rest", "adj": null, "indefinite": null, "noun": null, "type": "s", "desc": "The [noun] is shaky.", "id": "s_9", "synonyms": null, "definite": null, "name": "table"}], ["stove_0", {"room_type": "storage", "adj": "conventional", "indefinite": null, "noun": "stove", "type": "stove", "desc": "Useful for frying things.", "id": "stove_0", "synonyms": null, "definite": null, "name": "stove"}], ["f_3", {"room_type": "clean", "adj": "", "indefinite": null, "noun": "banana", "type": "f", "desc": "You couldn't pay me to eat that [noun].", "id": "f_3", "synonyms": null, "definite": null, "name": "banana"}], ["ingredient_0", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "ingredient", "desc": "", "id": "ingredient_0", "synonyms": null, "definite": null, "name": ""}], ["ingredient_2", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "ingredient", "desc": "", "id": "ingredient_2", "synonyms": null, "definite": null, "name": ""}], ["meal_0", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "meal", "desc": "", "id": "meal_0", "synonyms": null, "definite": null, "name": "meal"}], ["slot_0", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_0", "synonyms": null, "definite": null, "name": ""}], ["slot_1", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_1", "synonyms": null, "definite": null, "name": ""}], ["slot_2", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_2", "synonyms": null, "definite": null, "name": ""}], ["slot_3", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_3", "synonyms": null, "definite": null, "name": ""}], ["slot_4", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_4", "synonyms": null, "definite": null, "name": ""}], ["slot_5", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_5", "synonyms": null, "definite": null, "name": ""}], ["slot_6", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_6", "synonyms": null, "definite": null, "name": ""}], ["slot_7", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_7", "synonyms": null, "definite": null, "name": ""}], ["slot_8", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_8", "synonyms": null, "definite": null, "name": ""}], ["slot_9", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "slot", "desc": "", "id": "slot_9", "synonyms": null, "definite": null, "name": ""}], ["ingredient_3", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "ingredient", "desc": "", "id": "ingredient_3", "synonyms": null, "definite": null, "name": ""}], ["RECIPE", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "RECIPE", "desc": "", "id": "RECIPE", "synonyms": null, "definite": null, "name": ""}], ["ingredient_1", {"room_type": null, "adj": null, "indefinite": null, "noun": null, "type": "ingredient", "desc": "", "id": "ingredient_1", "synonyms": null, "definite": null, "name": ""}]], "main_quest": {"desc": null, "win_events": [{"actions": [{"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/south"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}], "name": "go/north"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_3"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_7"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_7"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_7"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_8"}], "name": "at"}], "name": "go/south"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_7"}], "name": "at"}], "name": "go/north"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_7"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_7"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_3"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/south"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "slot", "name": "slot_9"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "slot", "name": "slot_9"}], "name": "used"}], "name": "take"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}], "name": "go/north"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_9"}], "name": "at"}], "name": "go/west"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "slot", "name": "slot_2"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "slot", "name": "slot_2"}], "name": "used"}], "name": "take"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_9"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}], "name": "go/east"}, {"preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "name": "go/south"}], "commands": ["go south", "go east", "go north", "go east", "go south", "go north", "go west", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "go south"], "condition": {"preconditions": [{"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "postconditions": [{"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}, {"type": "r", "name": "r_5"}], "name": "event"}], "name": "trigger"}}], "commands": ["go south", "go east", "go north", "go east", "go south", "go north", "go west", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "go south"], "fail_events": [], "reward": 1}}