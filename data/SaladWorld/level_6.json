{"infos": [["P", {"definite": null, "type": "P", "desc": null, "room_type": "clean", "adj": null, "synonyms": null, "id": "P", "noun": null, "indefinite": null, "name": null}], ["I", {"definite": null, "type": "I", "desc": null, "room_type": null, "adj": null, "synonyms": null, "id": "I", "noun": null, "indefinite": null, "name": null}], ["r_0", {"definite": null, "type": "r", "desc": "I never took you for the sort of person who would show up in a kitchen, but I guess I was wrong.\n\n You can make out [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] fridge nearby.[if c_1 is open and there is something in the c_1] The fridge contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] What a letdown! The fridge is empty![end if] You can make out [if oven_0 is locked]a locked[else if oven_0 is open]an opened[otherwise]a closed[end if] oven.[if oven_0 is open and there is something in the oven_0] The oven contains [a list of things in the oven_0].[end if][if oven_0 is open and the oven_0 contains nothing] The oven is empty! What a waste of a day![end if] You see a table. You shudder, but continue examining the table. The table is massive.[if there is something on the s_14] On the table you make out [a list of things on the s_14]. Huh, weird.[end if][if there is nothing on the s_14] The table appears to be empty.[end if] You see a counter. The counter is vast.[if there is something on the s_15] On the counter you can see [a list of things on the s_15].[end if][if there is nothing on the s_15] But there isn't a thing on it. You swear loudly.[end if] You can make out a stove. The stove is conventional.[if there is something on the stove_0] On the stove you can see [a list of things on the stove_0].[end if][if there is nothing on the stove_0] But the thing is empty. You move on, clearly depressed by TextWorld.[end if]\n\nYou need an exit without a door? You should try going east. You need an exit without a door? You should try going north. You don't like doors? Why not try going west, that entranceway is not blocked by one.", "room_type": "storage", "adj": null, "synonyms": null, "id": "r_0", "noun": null, "indefinite": null, "name": "kitchen"}], ["r_1", {"definite": null, "type": "r", "desc": "You find yourself in an open space. A typical kind of place. Okay, just remember what you're here to do, and everything will go great.\n\n You see a showcase. [if there is something on the s_1]You see [a list of things on the s_1] on the showcase.[end if][if there is nothing on the s_1]But there isn't a thing on it. It would have been so cool if there was stuff on the showcase.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is not blocked by one.", "room_type": "work", "adj": null, "synonyms": null, "id": "r_1", "noun": null, "indefinite": null, "name": "open space"}], ["r_2", {"definite": null, "type": "r", "desc": "You find yourself in a livingroom. A normal one. You try to gain information on your surroundings by using a technique you call 'looking.'\n\n You see a sofa. [if there is something on the s_2]You see [a list of things on the s_2] on the sofa.[end if][if there is nothing on the s_2]The sofa appears to be empty.[end if] You can make out a table. [if there is something on the s_3]On the table you can make out [a list of things on the s_3]. It doesn't get more TextWorld than this![end if][if there is nothing on the s_3]But the thing is empty.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is not blocked by one. There is an exit to the north. You don't like doors? Why not try going west, that entranceway is not blocked by one.", "room_type": "cook", "adj": null, "synonyms": null, "id": "r_2", "noun": null, "indefinite": null, "name": "livingroom"}], ["r_5", {"definite": null, "type": "r", "desc": "Guess what, you are in a place we're calling a vegetable market.\n\n\n\nThere is an exit to the west.", "room_type": "rest", "adj": null, "synonyms": null, "id": "r_5", "noun": null, "indefinite": null, "name": "vegetable market"}], ["r_6", {"definite": null, "type": "r", "desc": "This garden you have just entered is definitely normal.\n\n Were you looking for a sofa? Because look over there, it's a sofa. What a coincidence, weren't you just thinking about a sofa? The sofa is ordinary.[if there is something on the s_0] On the sofa you make out [a list of things on the s_0].[end if][if there is nothing on the s_0] But the thing is empty, unfortunately.[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] blue door leading north. There is an exit to the south. There is an exit to the west.", "room_type": "clean", "adj": null, "synonyms": null, "id": "r_6", "noun": null, "indefinite": null, "name": "garden"}], ["r_10", {"definite": null, "type": "r", "desc": "Well, here we are in a backyard.\n\n You can make out a patio chair. [if there is something on the s_11]On the patio chair you make out [a list of things on the s_11].[end if][if there is nothing on the s_11]Unfortunately, there isn't a thing on it.[end if] You can make out a patio table. [if there is something on the s_12]On the patio table you can make out [a list of things on the s_12]. It doesn't get more TextWorld than this![end if][if there is nothing on the s_12]Looks like someone's already been here and taken everything off it, though.[end if]\n\nThere is an exit to the east. Don't worry, there is no door. You don't like doors? Why not try going north, that entranceway is not blocked by one.", "room_type": "storage", "adj": null, "synonyms": null, "id": "r_10", "noun": null, "indefinite": null, "name": "backyard"}], ["r_8", {"definite": null, "type": "r", "desc": "You've just walked into a spare room. Okay, just remember what you're here to do, and everything will go great.\n\n You can make out a patio chair. [if there is something on the s_7]On the patio chair you make out [a list of things on the s_7].[end if][if there is nothing on the s_7]Unfortunately, there isn't a thing on it.[end if] You can see a patio table. [if there is something on the s_8]You see [a list of things on the s_8] on the patio table.[end if][if there is nothing on the s_8]But there isn't a thing on it. Hm. Oh well[end if]\n\nThere is an exit to the south. Don't worry, there is no door. There is an exit to the west. Don't worry, there is no door.", "room_type": "storage", "adj": null, "synonyms": null, "id": "r_8", "noun": null, "indefinite": null, "name": "spare room"}], ["r_4", {"definite": null, "type": "r", "desc": "You arrive in a play room. A standard kind of place. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n You can make out a showcase. [if there is something on the s_4]You see [a list of things on the s_4] on the showcase.[end if][if there is nothing on the s_4]But oh no! there's nothing on this piece of garbage.[end if] Were you looking for a workbench? Because look over there, it's a workbench. Why don't you take a picture of it, it'll last longer! The workbench is standard.[if there is something on the s_5] On the workbench you can make out [a list of things on the s_5]. There's something strange about this being here, but you can't put your finger on it.[end if][if there is nothing on the s_5] The workbench appears to be empty.[end if] Were you looking for a shelf? Because look over there, it's a shelf. [if there is something on the s_6]You see [a list of things on the s_6] on the shelf.[end if][if there is nothing on the s_6]However, the shelf, like an empty shelf, has nothing on it. Aw, here you were, all excited for there to be things on it![end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] red door leading north. You need an exit without a door? You should try going east. You don't like doors? Why not try going south, that entranceway is not blocked by one.", "room_type": "rest", "adj": null, "synonyms": null, "id": "r_4", "noun": null, "indefinite": null, "name": "play room"}], ["r_11", {"definite": null, "type": "r", "desc": "You've entered a cutlery shop. You can barely contain your excitement.\n\n You can make out a table. [if there is something on the s_13]You see [a list of things on the s_13] on the table. Something scurries by right in the corner of your eye. Probably nothing.[end if][if there is nothing on the s_13]But oh no! there's nothing on this piece of junk. Aw, here you were, all excited for there to be things on it![end if]\n\nYou need an exit without a door? You should try going south.", "room_type": "rest", "adj": null, "synonyms": null, "id": "r_11", "noun": null, "indefinite": null, "name": "cutlery shop"}], ["r_9", {"definite": null, "type": "r", "desc": "You arrive in a fruit shop. An usual kind of place.\n\n You can see [if c_0 is locked]a locked[else if c_0 is open]an opened[otherwise]a closed[end if] container in the corner.[if c_0 is open and there is something in the c_0] The container contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] What a letdown! The container is empty![end if] You make out a table. [if there is something on the s_9]You see [a list of things on the s_9] on the table.[end if][if there is nothing on the s_9]But the thing hasn't got anything on it. This always happens![end if]\n\nThere is an exit to the north.", "room_type": "clean", "adj": null, "synonyms": null, "id": "r_9", "noun": null, "indefinite": null, "name": "fruit shop"}], ["r_3", {"definite": null, "type": "r", "desc": "You've just sauntered into a cook house. You decide to start listing off everything you see in the room, as if you were in a text adventure.\n\n\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] red door leading south.", "room_type": "storage", "adj": null, "synonyms": null, "id": "r_3", "noun": null, "indefinite": null, "name": "cook house"}], ["r_7", {"definite": null, "type": "r", "desc": "You are in a supermarket. A typical kind of place. The room is well lit.\n\n If you haven't noticed it already, there seems to be something there by the wall, it's a shelf. [if there is something on the s_10]You see [a list of things on the s_10] on the shelf.[end if][if there is nothing on the s_10]But the thing is empty. What's the point of an empty shelf?[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] blue door leading south.", "room_type": "clean", "adj": null, "synonyms": null, "id": "r_7", "noun": null, "indefinite": null, "name": "supermarket"}], ["d_1", {"definite": null, "type": "d", "desc": "It is what it is, a [noun]. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "rest", "adj": null, "synonyms": null, "id": "d_1", "noun": null, "indefinite": null, "name": "red door"}], ["d_0", {"definite": null, "type": "d", "desc": "It's a noble [noun] [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "clean", "adj": null, "synonyms": null, "id": "d_0", "noun": null, "indefinite": null, "name": "blue door"}], ["c_0", {"definite": null, "type": "c", "desc": "The [noun] looks well-built. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "clean", "adj": null, "synonyms": null, "id": "c_0", "noun": null, "indefinite": null, "name": "container"}], ["c_1", {"definite": null, "type": "c", "desc": "The [noun] looks towering. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to force open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "storage", "adj": "conventional", "synonyms": null, "id": "c_1", "noun": "fridge", "indefinite": null, "name": "fridge"}], ["f_0", {"definite": null, "type": "f", "desc": "You couldn't pay me to eat that [noun].", "room_type": "rest", "adj": "", "synonyms": null, "id": "f_0", "noun": "lettuce", "indefinite": null, "name": "lettuce"}], ["f_1", {"definite": null, "type": "f", "desc": "That's a [noun]!", "room_type": "clean", "adj": "", "synonyms": null, "id": "f_1", "noun": "tomato", "indefinite": null, "name": "tomato"}], ["f_2", {"definite": null, "type": "f", "desc": "That's a [noun]!", "room_type": "storage", "adj": "", "synonyms": null, "id": "f_2", "noun": "green apple", "indefinite": null, "name": "green apple"}], ["f_3", {"definite": null, "type": "f", "desc": "You couldn't pay me to eat that [noun].", "room_type": "storage", "adj": "", "synonyms": null, "id": "f_3", "noun": "parsley", "indefinite": null, "name": "parsley"}], ["f_5", {"definite": null, "type": "f", "desc": "The [noun] looks delectable.", "room_type": "storage", "adj": "", "synonyms": null, "id": "f_5", "noun": "green hot pepper", "indefinite": null, "name": "green hot pepper"}], ["f_6", {"definite": null, "type": "f", "desc": "You couldn't pay me to eat that [noun].", "room_type": "storage", "adj": "", "synonyms": null, "id": "f_6", "noun": "red apple", "indefinite": null, "name": "red apple"}], ["k_0", {"definite": null, "type": "k", "desc": "The [noun] looks useful.", "room_type": "work", "adj": null, "synonyms": null, "id": "k_0", "noun": null, "indefinite": null, "name": "blue key"}], ["k_1", {"definite": null, "type": "k", "desc": "The metal of the [noun] is polished.", "room_type": "clean", "adj": null, "synonyms": null, "id": "k_1", "noun": null, "indefinite": null, "name": "red key"}], ["k_2", {"definite": null, "type": "k", "desc": "The [noun] is cold to the touch", "room_type": "clean", "adj": null, "synonyms": null, "id": "k_2", "noun": null, "indefinite": null, "name": "chest key"}], ["o_0", {"definite": null, "type": "o", "desc": "The [noun] appears to fit in here", "room_type": "rest", "adj": "sharp", "synonyms": null, "id": "o_0", "noun": "knife", "indefinite": null, "name": "knife"}], ["oven_0", {"definite": null, "type": "oven", "desc": "Useful for roasting things.", "room_type": "storage", "adj": "conventional", "synonyms": null, "id": "oven_0", "noun": "oven", "indefinite": null, "name": "oven"}], ["s_0", {"definite": null, "type": "s", "desc": "The [noun] is shaky.", "room_type": "clean", "adj": null, "synonyms": null, "id": "s_0", "noun": null, "indefinite": null, "name": "sofa"}], ["s_1", {"definite": null, "type": "s", "desc": "The [noun] is an unstable piece of garbage.", "room_type": "work", "adj": null, "synonyms": null, "id": "s_1", "noun": null, "indefinite": null, "name": "showcase"}], ["s_10", {"definite": null, "type": "s", "desc": "The [noun] is wobbly.", "room_type": "clean", "adj": null, "synonyms": null, "id": "s_10", "noun": null, "indefinite": null, "name": "shelf"}], ["s_11", {"definite": null, "type": "s", "desc": "The [noun] is reliable.", "room_type": "storage", "adj": null, "synonyms": null, "id": "s_11", "noun": null, "indefinite": null, "name": "patio chair"}], ["s_12", {"definite": null, "type": "s", "desc": "The [noun] is shaky.", "room_type": "storage", "adj": null, "synonyms": null, "id": "s_12", "noun": null, "indefinite": null, "name": "patio table"}], ["s_13", {"definite": null, "type": "s", "desc": "The [noun] is reliable.", "room_type": "rest", "adj": null, "synonyms": null, "id": "s_13", "noun": null, "indefinite": null, "name": "table"}], ["s_14", {"definite": null, "type": "s", "desc": "The [noun] is shaky.", "room_type": "storage", "adj": "massive", "synonyms": null, "id": "s_14", "noun": "table", "indefinite": null, "name": "table"}], ["s_15", {"definite": null, "type": "s", "desc": "The [noun] is unstable.", "room_type": "storage", "adj": "vast", "synonyms": null, "id": "s_15", "noun": "counter", "indefinite": null, "name": "counter"}], ["s_2", {"definite": null, "type": "s", "desc": "The [noun] is unstable.", "room_type": "cook", "adj": null, "synonyms": null, "id": "s_2", "noun": null, "indefinite": null, "name": "sofa"}], ["s_3", {"definite": null, "type": "s", "desc": "The [noun] is reliable.", "room_type": "cook", "adj": null, "synonyms": null, "id": "s_3", "noun": null, "indefinite": null, "name": "table"}], ["s_4", {"definite": null, "type": "s", "desc": "The [noun] is unstable.", "room_type": "rest", "adj": null, "synonyms": null, "id": "s_4", "noun": null, "indefinite": null, "name": "showcase"}], ["s_5", {"definite": null, "type": "s", "desc": "The [noun] is solidly built.", "room_type": "rest", "adj": null, "synonyms": null, "id": "s_5", "noun": null, "indefinite": null, "name": "workbench"}], ["s_6", {"definite": null, "type": "s", "desc": "The [noun] is wobbly.", "room_type": "rest", "adj": null, "synonyms": null, "id": "s_6", "noun": null, "indefinite": null, "name": "shelf"}], ["s_7", {"definite": null, "type": "s", "desc": "The [noun] is an unstable piece of junk.", "room_type": "storage", "adj": null, "synonyms": null, "id": "s_7", "noun": null, "indefinite": null, "name": "patio chair"}], ["s_8", {"definite": null, "type": "s", "desc": "The [noun] is unstable.", "room_type": "storage", "adj": null, "synonyms": null, "id": "s_8", "noun": null, "indefinite": null, "name": "patio table"}], ["s_9", {"definite": null, "type": "s", "desc": "The [noun] is durable.", "room_type": "clean", "adj": null, "synonyms": null, "id": "s_9", "noun": null, "indefinite": null, "name": "table"}], ["stove_0", {"definite": null, "type": "stove", "desc": "Useful for frying things.", "room_type": "storage", "adj": "conventional", "synonyms": null, "id": "stove_0", "noun": "stove", "indefinite": null, "name": "stove"}], ["f_4", {"definite": null, "type": "f", "desc": "You couldn't pay me to eat that [noun].", "room_type": "clean", "adj": "", "synonyms": null, "id": "f_4", "noun": "banana", "indefinite": null, "name": "banana"}], ["ingredient_0", {"definite": null, "type": "ingredient", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "ingredient_0", "noun": null, "indefinite": null, "name": ""}], ["ingredient_3", {"definite": null, "type": "ingredient", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "ingredient_3", "noun": null, "indefinite": null, "name": ""}], ["ingredient_4", {"definite": null, "type": "ingredient", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "ingredient_4", "noun": null, "indefinite": null, "name": ""}], ["meal_0", {"definite": null, "type": "meal", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "meal_0", "noun": null, "indefinite": null, "name": "meal"}], ["slot_0", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_0", "noun": null, "indefinite": null, "name": ""}], ["slot_1", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_1", "noun": null, "indefinite": null, "name": ""}], ["slot_2", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_2", "noun": null, "indefinite": null, "name": ""}], ["slot_3", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_3", "noun": null, "indefinite": null, "name": ""}], ["slot_4", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_4", "noun": null, "indefinite": null, "name": ""}], ["slot_5", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_5", "noun": null, "indefinite": null, "name": ""}], ["slot_6", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_6", "noun": null, "indefinite": null, "name": ""}], ["slot_7", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_7", "noun": null, "indefinite": null, "name": ""}], ["slot_8", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_8", "noun": null, "indefinite": null, "name": ""}], ["slot_9", {"definite": null, "type": "slot", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "slot_9", "noun": null, "indefinite": null, "name": ""}], ["ingredient_2", {"definite": null, "type": "ingredient", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "ingredient_2", "noun": null, "indefinite": null, "name": ""}], ["RECIPE", {"definite": null, "type": "RECIPE", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "RECIPE", "noun": null, "indefinite": null, "name": ""}], ["ingredient_1", {"definite": null, "type": "ingredient", "desc": "", "room_type": null, "adj": null, "synonyms": null, "id": "ingredient_1", "noun": null, "indefinite": null, "name": ""}]], "main_quest": {"reward": 1, "win_events": [{"actions": [{"postconditions": [{"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}], "name": "go/south"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}], "name": "go/east"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}], "name": "go/north"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_8"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_4"}], "name": "free"}], "name": "go/east"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_9"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_8"}], "name": "free"}], "name": "go/south"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_8"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "free"}], "name": "go/north"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "free"}], "name": "go/west"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}], "name": "go/south"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}], "name": "go/east"}, {"postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "slot", "name": "slot_0"}], "name": "used"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "slot", "name": "slot_0"}], "name": "free"}], "name": "take"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}], "name": "go/west"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}], "name": "go/west"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_6"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}], "name": "go/north"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_10"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_10"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_10"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "free"}], "name": "go/west"}, {"postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "slot", "name": "slot_7"}], "name": "used"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "slot", "name": "slot_7"}], "name": "free"}], "name": "take"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_10"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_6"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_10"}], "name": "free"}], "name": "go/east"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}], "name": "go/south"}, {"postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "stove", "name": "stove_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "fried"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "cooked"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "stove", "name": "stove_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "raw"}], "name": "cook/stove/cooked/raw"}], "condition": {"postconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "stove", "name": "stove_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "fried"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "cooked"}, {"arguments": [{"type": "I", "name": "I"}, {"type": "P", "name": "P"}, {"type": "f", "name": "f_0"}, {"type": "r", "name": "r_0"}, {"type": "stove", "name": "stove_0"}], "name": "event"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "stove", "name": "stove_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "I", "name": "I"}], "name": "in"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "fried"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "cooked"}], "name": "trigger"}, "commands": ["go south", "go east", "go north", "go east", "go south", "go north", "go west", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "go south", "cook lettuce with stove"]}], "desc": null, "fail_events": [], "commands": ["go south", "go east", "go north", "go east", "go south", "go north", "go west", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "go south", "cook lettuce with stove"]}, "metadata": {"max_score": 35, "settings": {"only_last_action": false, "overview": false, "force": false, "blend_descriptions": false, "silent": false, "seed": 51748, "cook": true, "list": false, "format": "ulx", "go": 1, "recipe": 3, "save_overview": false, "theme": "house", "split": null, "output": "tw_games/finale_level6.ulx", "entity_numbering": false, "blend_instructions": false, "cut": true, "ambiguous_instructions": false, "drop": false, "subcommand": "tw-cooking", "include_adj": false, "open": false, "third_party": null, "take": 0, "verbose": false}, "walkthrough": ["go south", "go east", "go north", "go east", "go south", "take banana from container", "go north", "go west", "open red door", "go north", "take green apple", "open red door", "go south", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "open blue door", "go north", "take tomato", "open blue door", "go south", "go south", "cook banana with oven", "cook lettuce with stove", "take knife from cutlery shop", "chop banana with knife", "drop knife", "take knife", "slice green apple with knife", "drop knife", "take knife", "slice lettuce with knife", "drop knife", "take knife", "chop parsley with knife", "drop knife", "take knife", "dice tomato with knife", "drop knife", "prepare meal", "eat meal"], "ingredients": [["banana", "roasted", "chopped"], ["green apple", "raw", "sliced"], ["lettuce", "fried", "sliced"], ["parsley", "raw", "chopped"], ["tomato", "raw", "diced"]], "uuid": "tw-cooking-recipe3+cook+cut+go1-xROXurJOHdKyU16E", "entities": ["oven", "sofa", "blue door", "table", "chest key", "vegetable market", "play room", "garden", "green apple", "table", "spare room", "backyard", "open space", "sofa", "container", "red apple", "lettuce", "showcase", "fridge", "knife", "patio table", "stove", "red key", "fruit shop", "cutlery shop", "patio table", "shelf", "table", "counter", "shelf", "blue key", "patio chair", "red door", "tomato", "kitchen", "showcase", "patio chair", "banana", "supermarket", "workbench", "meal", "table", "livingroom", "parsley", "green hot pepper", "cook house"], "seeds": {"quest": 64477, "objects": 28823, "grammar": 34517, "map": 50594}}, "quests": [{"reward": 10, "win_events": [{"actions": [{"postconditions": [{"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}], "name": "go/south"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}], "name": "go/east"}, {"postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}], "preconditions": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}], "name": "go/east"}], "condition": {"postconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "event"}], "preconditions": [{"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_5"}], "name": "at"}], "name": "trigger"}, "commands": ["go south", "go east", "go east"]}], "desc": "It's time to explore the amazing world of TextWorld! First of all, take a trip south. Then, go to the east. With that over with, try to move east. And that's it, another successful game of TextWorld!", "fail_events": [], "commands": ["go south", "go east", "go east"]}, {"reward": 5, "win_events": [{"actions": [], "condition": {"postconditions": [{"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "f", "name": "f_4"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "c", "name": "c_1"}, {"type": "f", "name": "f_4"}], "name": "event"}], "preconditions": [{"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "f", "name": "f_4"}, {"type": "c", "name": "c_1"}], "name": "in"}], "name": "trigger"}, "commands": []}], "desc": "", "fail_events": [], "commands": []}, {"reward": 5, "win_events": [{"actions": [], "condition": {"postconditions": [{"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "c", "name": "c_1"}, {"type": "f", "name": "f_2"}], "name": "event"}], "preconditions": [{"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "c", "name": "c_1"}], "name": "in"}], "name": "trigger"}, "commands": []}], "desc": "", "fail_events": [], "commands": []}, {"reward": 5, "win_events": [{"actions": [], "condition": {"postconditions": [{"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_15"}], "name": "on"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_15"}], "name": "event"}], "preconditions": [{"arguments": [{"type": "f", "name": "f_0"}, {"type": "s", "name": "s_15"}], "name": "on"}], "name": "trigger"}, "commands": []}], "desc": "", "fail_events": [], "commands": []}, {"reward": 5, "win_events": [{"actions": [], "condition": {"postconditions": [{"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "o", "name": "o_0"}, {"type": "s", "name": "s_15"}], "name": "on"}, {"arguments": [{"type": "c", "name": "c_1"}, {"type": "f", "name": "f_3"}, {"type": "o", "name": "o_0"}, {"type": "s", "name": "s_15"}], "name": "event"}], "preconditions": [{"arguments": [{"type": "c", "name": "c_1"}], "name": "closed"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "c", "name": "c_1"}], "name": "in"}, {"arguments": [{"type": "o", "name": "o_0"}, {"type": "s", "name": "s_15"}], "name": "on"}], "name": "trigger"}, "commands": []}], "desc": "", "fail_events": [], "commands": []}, {"reward": 5, "win_events": [{"actions": [], "condition": {"postconditions": [{"arguments": [{"type": "f", "name": "f_1"}, {"type": "s", "name": "s_15"}], "name": "on"}, {"arguments": [{"type": "f", "name": "f_1"}, {"type": "s", "name": "s_15"}], "name": "event"}], "preconditions": [{"arguments": [{"type": "f", "name": "f_1"}, {"type": "s", "name": "s_15"}], "name": "on"}], "name": "trigger"}, "commands": []}], "desc": "", "fail_events": [], "commands": []}], "KB": {"logic": "## box: i.e. portable container\n#type box : c, o {\n#\n#    predicates {\n#\n#        reachable_box_I(P, I, box) = in(box, I);\n#        reachable_box_r(P, r, box) = at(P, r) & at(box, r);\n#        reachable_box_s(P, r, s, box) = at(P, r) & at(s, r) & on(box, s);\n#        reachable_box_c(P, r, c, box) = at(P, r) & at(c, r) & open(c) & in(box, c);\n#    }\n#\n#    rules {\n#        insert/box :: $reachable_box_I(P, I, box) & $open(box) & in(o, I) -> in(o, box);\n#        insert/box/s :: $reachable_box_s(P, r, s, box) & in(o, I) -> in(o, box);\n#        insert/box/c :: $reachable_box_c(P, r, c, box) & in(o, I) -> in(o, box);\n#    }\n#\n#    inform7 {\n#        type {\n#            kind :: \"box-like\";\n#            definition :: \"box-like is a kind of container. box-like is portable.\";\n#        }\n#\n#        commands {\n#            insert/box :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/s :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#            insert/box/c :: \"insert {o} into {box}\" :: \"inserting the {o} into the {box}\";\n#        }\n#    }\n#}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr2 :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    predicates {\n        sharp(t);\n        cuttable(t);\n        cookable(t);\n        drinkable(t);\n    }\n\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"a thing can be drinkable. a thing is usually not drinkable. a thing can be cookable. a thing is usually not cookable. a thing can be damaged. a thing is usually not damaged. a thing can be sharp. a thing is usually not sharp. a thing can be cuttable. a thing is usually not cuttable. a thing can be a source of heat. Type of cooking is a kind of value. The type of cooking are raw, grilled, roasted and fried. a thing can be needs cooking. Type of cutting is a kind of value. The type of cutting are uncut, sliced, diced and chopped.\";\n        }\n\n        predicates {\n            sharp(t) :: \"The {t} is sharp\";\n            cookable(t) :: \"The {t} is cookable\";\n            cuttable(t) :: \"The {t} is cuttable\";\n            drinkable(t) :: \"The {t} is drinkable\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\ntype object {\n    inform7 {\n        type {\n            kind :: \"object\";\n        }\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# stove\ntype stove : s {\n    rules {\n        cook/stove/burned :: $at(P, r) & $at(stove, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/stove/cooked/raw :: $at(P, r) & $at(stove, r) & $in(f, I) & raw(f)            -> fried(f) & cooked(f);\n        cook/stove/cooked/needs_cooking :: $at(P, r) & $at(stove, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> fried(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"stove-like\";\n            definition :: \"stove-like is a source of heat.\";\n        }\n\n        commands {\n            cook/stove/cooked/raw           :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/cooked/needs_cooking :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/burned               :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        consumed(f);\n        edible(f);\n        inedible(f);\n\n        needs_cooking(f);\n        raw(f);\n        cooked(f);\n        burned(f);\n\n        roasted(f);\n        fried(f);\n        grilled(f);\n        # boiled(f);\n        # steamed(f);\n\n        uncut(f);\n        chopped(f);\n        sliced(f);\n        diced(f);\n    }\n\n    rules {\n        eat :: in(f, I) & edible(f) & used(slot) -> consumed(f) & free(slot);\n        drink :: in(f, I) & drinkable(f) & used(slot) -> consumed(f) & free(slot);\n        slice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> sliced(f);\n        dice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> diced(f);\n        chop :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> chopped(f);\n    }\n\n    constraints {\n        consumed1 :: consumed(f) & in(f, I) -> fail();\n        consumed2 :: consumed(f) & in(f, c) -> fail();\n        consumed3 :: consumed(f) & on(f, s) -> fail();\n        consumed4 :: consumed(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is usually edible. food is cookable. food has a type of cooking. food has a type of cutting. food can be cooked. food can be burned. food can be consumed. food is usually not consumed. food is usually cuttable.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            inedible(f) :: \"The {f} is inedible\";\n            consumed(f) :: \"The {f} is consumed\";\n\n            needs_cooking(f) :: \"The {f} is needs cooking\";\n\n            raw(f) :: \"The {f} is raw\";\n            cooked(f) :: \"The {f} is cooked\";\n            burned(f) :: \"The {f} is burned\";\n            fried(f) :: \"The {f} is fried\";\n            grilled(f) :: \"The {f} is grilled\";\n            roasted(f) :: \"The {f} is roasted\";\n\n            uncut(f) :: \"The {f} is uncut\";\n            sliced(f) :: \"The {f} is sliced\";\n            chopped(f) :: \"The {f} is chopped\";\n            diced(f) :: \"The {f} is diced\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n            drink :: \"drink {f}\" :: \"drinking the {f}\";\n            slice :: \"slice {f} with {o}\" :: \"slicing the {f} with the {o}\";\n            dice  :: \"dice {f} with {o}\"  :: \"dicing the {f} with the {o}\";\n            chop  :: \"chop {f} with {o}\"  :: \"chopping the {f} with the {o}\";\n        }\n\n        code :: \"\"\"\n            [Drinking liquid]\n            Drinking carried thing is an action applying to one carried thing.\n            The block drinking rule is not listed in any rulebook.\n            Understand nothing as drinking.\n            Understand \"drink [something]\" as drinking carried thing.\n\n            After drinking carried thing:\n                Now the noun is consumed;\n                Continue the action.\n\n            Check an actor drinking carried thing (this is the can\u2019t drink unless drinkable rule):\n                if the noun is not a thing or the noun is not drinkable:\n                    say \"You cannot drink [the noun].\";\n                    rule fails;\n\n            Carry out an actor drinking carried thing (this is the drinking rule):\n                remove the noun from play.\n\n            Report an actor drinking carried thing (this is the report drinking rule):\n                if the actor is the player:\n                    say \"You drink [the noun]. Not bad.\";\n                otherwise:\n                    say \"[The person asked] just drunk [the noun].\".\n\n            [Eating food]\n            After eating a food (called target):\n                Now the target is consumed;\n                Continue the action.\n\n            Check eating inedible food (called target):\n                if target is needs cooking:\n                    say \"You should cook [the target] first.\";\n                    rule fails.\n\n            [Understanding things by their properties - http://inform7.com/learn/man/WI_17_15.html]\n            Understand the type of cutting property as describing food.\n            Understand the type of cooking property as describing food.\n\n            [Processing food]\n            Understand the commands  \"slice\", \"prune\" as something new.\n            The block cutting rule is not listed in any rulebook.\n            Dicing it with is an action applying to two carried things.\n            Slicing it with is an action applying to two carried things.\n            Chopping it with is an action applying to two carried things.\n\n            Slicing something with something is a cutting activity.\n            Dicing something with something is a cutting activity.\n            Chopping something with something is a cutting activity.\n\n            Does the player mean slicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean chopping something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean dicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Check an actor cutting (this is the generic cut is now allowed rule):\n                say \"You need to specify how you want to cut [the noun]. Either slice, dice, or chop it.\";\n                rule fails.\n\n            Before a cutting activity when the noun is not cuttable:\n                say \"Can only cut cuttable food.\";\n                rule fails.\n\n            Before a cutting activity when the noun is cuttable and the noun is not uncut:\n                say \"[The noun] is already [type of cutting of the noun].\";\n                rule fails.\n\n            Before a cutting activity when the second noun is not sharp:\n                say \"Cutting something requires a knife.\";\n                rule fails.\n\n            Before printing the name of a food (called the food item) which is not uncut while looking, examining, listing contents or taking inventory:\n                say \"[type of cutting of food item] \".\n\n            [Slicing food]\n            Carry out slicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"[The food item] is already [type of cutting of the food item].\";\n                    stop;\n                Now the food item is sliced;\n                say \"You slice the [food item].\".\n\n            Understand \"slice [something] with/using [something]\" as slicing it with.\n\n            [Dicing food]\n            Carry out dicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is diced;\n                say \"You dice the [food item].\".\n\n            Understand \"dice [something] with/using [something]\" as dicing it with.\n\n            [Chopping food]\n            Carry out chopping a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is chopped;\n                say \"You chop the [food item].\".\n\n            Understand the command \"chop\" as something new. [Remove its association with slicing]\n            Understand \"chop [something] with/using [something]\" as chopping it with.\n\n            [Cooking food]\n            Cooking it with is an action applying to one carried thing and one thing.\n\n            Does the player mean cooking something with something carried:\n                it is very unlikely;\n\n            Check cooking something not cookable with something (this is the cook only cookable things rule):\n                say \"Can only cook food.\" instead.\n\n            Check cooking something cookable with something not a source of heat (this is the cooking requires a source of heat rule):\n                say \"Cooking requires a source of heat.\" instead.\n\n            Carry out cooking a carried food (called the food item) with a thing (called a the source of heat):\n                if the food item is cooked:\n                    Now the food item is burned;\n                    Now the food item is not edible;\n                    say \"You burned the [food item]!\";\n                    stop;\n                otherwise:\n                    Now the food item is cooked;\n                if the food item is needs cooking:\n                    Now the food item is edible;\n                    Now the food item is not needs cooking;\n                if the source of heat is a stove-like:\n                    Now the food item is fried;\n                    say \"You fried the [food item].\";\n                else if the source of heat is a oven-like:\n                    Now the food item is roasted;\n                    say \"You roasted the [food item].\";\n                else if the source of heat is a toaster-like:\n                    Now the food item is grilled;\n                    say \"You grilled the [food item].\".\n\n            Understand \"cook [something] with/in/on/using [something]\" as cooking it with.\n\n            Before printing the name of a food (called the food item) while looking, examining, listing contents or taking inventory:\n                if the food item is needs cooking:\n                    say \"raw \";\n                else if the food item is burned:\n                    say \"burned \";\n                else if the food item is not raw:\n                    say \"[type of cooking of food item] \".\n\n        \"\"\";\n    }\n}\n\n# Player\ntype P {\n    inform7 {\n        code :: \"\"\"\n            The carrying capacity of the player is 0.\n        \"\"\";\n    }\n\n}\n\ntype ingredient : t {\n    predicates {\n        base(f, ingredient);\n\n        raw(ingredient);\n        roasted(ingredient);\n        fried(ingredient);\n        # cooked(ingredient);\n\n        uncut(ingredient);\n        chopped(ingredient);\n        sliced(ingredient);\n        diced(ingredient);\n    }\n\n    inform7 {\n        predicates {\n            #base(f, ingredient) :: \"When play begins, the base of {ingredient} is {f}\";\n            base(f, ingredient) :: \"The base of {ingredient} is {f}\";\n\n            raw(ingredient) :: \"The {ingredient} is raw\";\n            # cooked(ingredient) :: \"The base of {ingredient} is cooked\";\n            fried(ingredient) :: \"The {ingredient} is fried\";\n            grilled(ingredient) :: \"The {ingredient} is grilled\";\n            roasted(ingredient) :: \"The {ingredient} is roasted\";\n\n            uncut(ingredient) :: \"The {ingredient} is uncut\";\n            sliced(ingredient) :: \"The {ingredient} is sliced\";\n            chopped(ingredient) :: \"The {ingredient} is chopped\";\n            diced(ingredient) :: \"The {ingredient} is diced\";\n        }\n\n        type {\n            kind :: \"ingredient-like\";\n            definition :: \"ingredient-like has a thing called base. ingredient-like has a type of cooking. ingredient-like has a type of cutting.\";\n        }\n    }\n}\n\n# meal\ntype meal : f {\n    inform7 {\n        type {\n            kind :: \"meal-like\";\n        }\n    }\n}\n\ntype RECIPE {\n    predicates {\n        ingredient_1(f);\n        ingredient_2(f);\n        ingredient_3(f);\n        cooking_location(r, RECIPE);\n        in(ingredient, RECIPE);\n        out(meal, RECIPE);\n        player_in_cooking_location(P, r) = at(P, r) & cooking_location(r, RECIPE);\n    }\n\n    rules {\n        make/recipe/1 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & $out(meal, RECIPE) -> in(meal, I) & edible(meal);\n        make/recipe/2 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & $out(meal, RECIPE) & $used(slot) & used(slot') -> in(meal, I) & free(slot') & edible(meal);\n        make/recipe/3 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') -> in(meal, I) & free(slot') & free(slot'') & edible(meal);\n    }\n\n    inform7 {\n        predicates {\n            ingredient_1(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_2(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_3(f) :: \"\";  # No equivalent in Inform7.\n            cooking_location(r, RECIPE) :: \"The cooking location of the {RECIPE} is the {r}.\";\n            in(ingredient, RECIPE) :: \"When play begins, add {ingredient} to the ingredients of the {RECIPE}\";\n            out(meal, RECIPE) :: \"The meal of the {RECIPE} is the {meal}.\";\n        }\n\n        type {\n            kind :: \"recipe-like\";\n            definition :: \"A recipe-like is a kind of thing. A recipe-like has a list of ingredient-like called ingredients. A recipe-like has a thing called meal. A recipe-like has a room called cooking location.\";\n        }\n\n        commands {\n            make/recipe/1 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/2 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/3 :: \"prepare meal\" :: \"preparing meal\";\n        }\n\n        code :: \"\"\"\n            [Ingredient]\n            Rule for printing the name of an ingredient-like (called I):\n                if type of cutting of I is not uncut:\n                    say  \"[type of cutting of I] \";\n                if type of cooking of I is not raw:\n                    say  \"[type of cooking of I] \";\n                say  \"[base of I]\";\n\n            [Preparing a meal]\n            Preparing meal is an action applying to nothing.\n            Before preparing meal:\n                if location is not the cooking location of the recipe:\n                    say \"Can only prepare meal in the [cooking location of the recipe].\";\n                    rule fails;\n                Repeat with ingredient running through the ingredients of the recipe:\n                    let F be the base of the ingredient;\n                    if player does not carry the F:\n                        say \"The recipe requires [a ingredient].\";\n                        rule fails;\n                    if type of cooking of F is not type of cooking of ingredient:\n                        say \"The recipe requires [a ingredient].\";\n                        rule fails;\n                    if type of cutting of F is not type of cutting of ingredient:\n                        say \"The recipe requires [a ingredient].\";\n                        rule fails;\n\n            Carry out preparing meal:\n                say \"Adding the meal to your inventory.\";\n                Repeat with ingredient running through the ingredients of recipe:\n                    now the base of the ingredient is nowhere;\n                now the player carries the meal of the recipe;\n                set pronouns from the meal of the recipe.\n\n            Understand \"prepare meal\" as preparing meal.\n        \"\"\";\n    }\n}\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n\n        code :: \"\"\"\n            After examining a supporter which contains nothing:\n                say \"It's empty.\".\n        \"\"\";\n    }\n}\n\n# oven\ntype oven : c {\n    rules {\n        cook/oven/burned :: $at(P, r) & $at(oven, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/oven/cooked/raw :: $at(P, r) & $at(oven, r) & $in(f, I) & raw(f)            -> roasted(f) & cooked(f);\n        cook/oven/cooked/needs_cooking :: $at(P, r) & $at(oven, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> roasted(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"oven-like\";\n            definition :: \"oven-like is a source of heat.\";\n        }\n\n        commands {\n            cook/oven/cooked/raw           :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/cooked/needs_cooking :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/burned               :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n        }\n    }\n}\n\ntype toaster : c {\n    rules {\n        cook/toaster/burned :: $at(P, r) & $at(toaster, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/toaster/cooked/raw :: $at(P, r) & $at(toaster, r) & $in(f, I) & raw(f)            -> grilled(f) & cooked(f);\n        cook/toaster/cooked/needs_cooking :: $at(P, r) & $at(toaster, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> grilled(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"toaster-like\";\n            definition :: \"toaster-like is a source of heat.\";\n        }\n\n        commands {\n            cook/toaster/cooked/raw           :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/cooked/needs_cooking :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/burned               :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n\n        code :: \"\"\"\n            After examining an open container which contains nothing:\n                say \"It's empty.\".\n        \"\"\";\n    }\n}\n\n# Inventory\ntype slot {\n    predicates {\n        free(slot);\n        used(slot);\n    }\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"\";\n        }\n        predicates {\n            free(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n            used(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n        }\n    }\n}\n\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        take :: $at(P, r) & at(o, r) & free(slot) -> in(o, I) & used(slot);\n        drop :: $at(P, r) & in(o, I) & used(slot) -> at(o, r) & free(slot);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) & free(slot) -> in(o, I) & used(slot);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) & used(slot) -> in(o, c) & free(slot);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) & free(slot) -> in(o, I) & used(slot);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) & used(slot) -> on(o, s) & free(slot);\n\n        examine/I :: at(o, I) -> at(o, I);\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);\n    }\n\n    reverse_rules {\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n\n        look :: at(P, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(s, r) :: \"The {s} is in {r}\";\n            at(c, r) :: \"The {c} is in {r}\";\n            at(o, r) :: \"The {o} is in {r}\";\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n## pot\n#type pot : box {\n#\n#    inform7 {\n#        type {\n#            kind :: \"pot-like\";\n#            definition :: \"pot-like is a kind of box-like.\";\n#        }\n#\n#    }\n#}\n\n", "text_grammars_path": "./textworld_data/text_grammars"}, "world": [{"arguments": [{"type": "P", "name": "P"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "c", "name": "c_0"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "c", "name": "c_1"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "r", "name": "r_5"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_1"}, {"type": "r", "name": "r_7"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_5"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_6"}, {"type": "r", "name": "r_3"}], "name": "at"}, {"arguments": [{"type": "k", "name": "k_0"}, {"type": "r", "name": "r_1"}], "name": "at"}, {"arguments": [{"type": "k", "name": "k_1"}, {"type": "r", "name": "r_7"}], "name": "at"}, {"arguments": [{"type": "k", "name": "k_2"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "o", "name": "o_0"}, {"type": "r", "name": "r_11"}], "name": "at"}, {"arguments": [{"type": "oven", "name": "oven_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_0"}, {"type": "r", "name": "r_6"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_1"}, {"type": "r", "name": "r_1"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_10"}, {"type": "r", "name": "r_7"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_11"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_12"}, {"type": "r", "name": "r_10"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_13"}, {"type": "r", "name": "r_11"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_14"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_15"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_2"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_3"}, {"type": "r", "name": "r_2"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_4"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_5"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_6"}, {"type": "r", "name": "r_4"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_7"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_8"}, {"type": "r", "name": "r_8"}], "name": "at"}, {"arguments": [{"type": "s", "name": "s_9"}, {"type": "r", "name": "r_9"}], "name": "at"}, {"arguments": [{"type": "stove", "name": "stove_0"}, {"type": "r", "name": "r_0"}], "name": "at"}, {"arguments": [{"type": "f", "name": "f_0"}, {"type": "ingredient", "name": "ingredient_2"}], "name": "base"}, {"arguments": [{"type": "f", "name": "f_1"}, {"type": "ingredient", "name": "ingredient_4"}], "name": "base"}, {"arguments": [{"type": "f", "name": "f_2"}, {"type": "ingredient", "name": "ingredient_1"}], "name": "base"}, {"arguments": [{"type": "f", "name": "f_3"}, {"type": "ingredient", "name": "ingredient_3"}], "name": "base"}, {"arguments": [{"type": "f", "name": "f_4"}, {"type": "ingredient", "name": "ingredient_0"}], "name": "base"}, {"arguments": [{"type": "ingredient", "name": "ingredient_0"}], "name": "chopped"}, {"arguments": [{"type": "ingredient", "name": "ingredient_3"}], "name": "chopped"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "cookable"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "cookable"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "cookable"}, {"arguments": [{"type": "f", "name": "f_4"}], "name": "cookable"}, {"arguments": [{"type": "f", "name": "f_5"}], "name": "cookable"}, {"arguments": [{"type": "f", "name": "f_6"}], "name": "cookable"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "cooking_location"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_4"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_5"}], "name": "cuttable"}, {"arguments": [{"type": "f", "name": "f_6"}], "name": "cuttable"}, {"arguments": [{"type": "ingredient", "name": "ingredient_4"}], "name": "diced"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_1"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_10"}], "name": "east_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_4"}], "name": "east_of"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_4"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_5"}], "name": "edible"}, {"arguments": [{"type": "f", "name": "f_6"}], "name": "edible"}, {"arguments": [{"type": "meal", "name": "meal_0"}], "name": "edible"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_1"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_1"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_11"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_11"}, {"type": "r", "name": "r_10"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_5"}, {"type": "r", "name": "r_2"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_10"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_4"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "free"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_8"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_0"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_1"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_2"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_3"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_4"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_5"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_6"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_7"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_8"}], "name": "free"}, {"arguments": [{"type": "slot", "name": "slot_9"}], "name": "free"}, {"arguments": [{"type": "ingredient", "name": "ingredient_2"}], "name": "fried"}, {"arguments": [{"type": "f", "name": "f_4"}, {"type": "c", "name": "c_0"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_0"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_1"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_2"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_3"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "ingredient", "name": "ingredient_4"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "in"}, {"arguments": [{"type": "f", "name": "f_4"}], "name": "ingredient_1"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "ingredient_2"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "ingredient_3"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "ingredient_4"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "ingredient_5"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "d", "name": "d_1"}, {"type": "r", "name": "r_4"}], "name": "link"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "d", "name": "d_1"}, {"type": "r", "name": "r_3"}], "name": "link"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "d", "name": "d_0"}, {"type": "r", "name": "r_7"}], "name": "link"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "d", "name": "d_0"}, {"type": "r", "name": "r_6"}], "name": "link"}, {"arguments": [{"type": "c", "name": "c_0"}], "name": "locked"}, {"arguments": [{"type": "d", "name": "d_0"}], "name": "locked"}, {"arguments": [{"type": "d", "name": "d_1"}], "name": "locked"}, {"arguments": [{"type": "k", "name": "k_0"}, {"type": "d", "name": "d_0"}], "name": "match"}, {"arguments": [{"type": "k", "name": "k_1"}, {"type": "d", "name": "d_1"}], "name": "match"}, {"arguments": [{"type": "k", "name": "k_2"}, {"type": "c", "name": "c_0"}], "name": "match"}, {"arguments": [{"type": "r", "name": "r_11"}, {"type": "r", "name": "r_10"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_3"}, {"type": "r", "name": "r_4"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_2"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_0"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_7"}, {"type": "r", "name": "r_6"}], "name": "north_of"}, {"arguments": [{"type": "r", "name": "r_8"}, {"type": "r", "name": "r_9"}], "name": "north_of"}, {"arguments": [{"type": "c", "name": "c_1"}], "name": "open"}, {"arguments": [{"type": "meal", "name": "meal_0"}, {"type": "RECIPE", "name": "RECIPE"}], "name": "out"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "raw"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "raw"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "raw"}, {"arguments": [{"type": "f", "name": "f_4"}], "name": "raw"}, {"arguments": [{"type": "f", "name": "f_5"}], "name": "raw"}, {"arguments": [{"type": "f", "name": "f_6"}], "name": "raw"}, {"arguments": [{"type": "ingredient", "name": "ingredient_1"}], "name": "raw"}, {"arguments": [{"type": "ingredient", "name": "ingredient_3"}], "name": "raw"}, {"arguments": [{"type": "ingredient", "name": "ingredient_4"}], "name": "raw"}, {"arguments": [{"type": "ingredient", "name": "ingredient_0"}], "name": "roasted"}, {"arguments": [{"type": "o", "name": "o_0"}], "name": "sharp"}, {"arguments": [{"type": "ingredient", "name": "ingredient_1"}], "name": "sliced"}, {"arguments": [{"type": "ingredient", "name": "ingredient_2"}], "name": "sliced"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_6"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_11"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_4"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_3"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_6"}, {"type": "r", "name": "r_7"}], "name": "south_of"}, {"arguments": [{"type": "r", "name": "r_9"}, {"type": "r", "name": "r_8"}], "name": "south_of"}, {"arguments": [{"type": "f", "name": "f_0"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_1"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_2"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_3"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_4"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_5"}], "name": "uncut"}, {"arguments": [{"type": "f", "name": "f_6"}], "name": "uncut"}, {"arguments": [{"type": "r", "name": "r_0"}, {"type": "r", "name": "r_2"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_1"}, {"type": "r", "name": "r_0"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_10"}, {"type": "r", "name": "r_6"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_2"}, {"type": "r", "name": "r_5"}], "name": "west_of"}, {"arguments": [{"type": "r", "name": "r_4"}, {"type": "r", "name": "r_8"}], "name": "west_of"}], "extras": {"recipe": "\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\n  banana\n  green apple\n  lettuce\n  parsley\n  tomato\n\nDirections:\n  chop the banana\n  roast the banana\n  slice the green apple\n  slice the lettuce\n  fry the lettuce\n  chop the parsley\n  dice the tomato\n  prepare meal\n", "walkthrough": ["go south", "go east", "go north", "go east", "go south", "take banana from container", "go north", "go west", "open red door", "go north", "take green apple", "open red door", "go south", "go south", "go east", "take lettuce", "go west", "go west", "go north", "go west", "take parsley", "go east", "open blue door", "go north", "take tomato", "open blue door", "go south", "go south", "cook banana with oven", "cook lettuce with stove", "take knife from cutlery shop", "chop banana with knife", "drop knife", "take knife", "slice green apple with knife", "drop knife", "take knife", "slice lettuce with knife", "drop knife", "take knife", "chop parsley with knife", "drop knife", "take knife", "dice tomato with knife", "drop knife", "prepare meal", "eat meal"]}, "version": 1, "grammar": {"only_last_action": false, "blend_descriptions": false, "blend_instructions": false, "include_adj": false, "names_to_exclude": [], "theme": "house", "allowed_variables_numbering": false, "ambiguous_instructions": false, "unique_expansion": false}, "objective": "You are hungry! Let's cook a delicious meal. Check the cookbook in the kitchen for the recipe. Once done, enjoy your meal!"}